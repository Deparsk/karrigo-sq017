spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/karri_go_db
    username: postgres
    password: password

    hikari:
      data-source-properties:
        socketFactory: com.google.cloud.sql.mysql.SocketFactory
        cloudSqlInstance: karrigo-java017:us-central1:karri-go-db



  jpa:
    properties:
      hibernate:
        format_sql: true

        jdbc:
          time_zone: UTC+1

    hibernate:
      ddl-auto: create-drop
    show-sql: true

  config:
    import: optional:file:.env[.properties]


  mail:
    password: ${EMAIL_PASSWORD}
    username: ${EMAIL_USERNAME}
    host: smtp.gmail.com
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  kafka:
    bootstrap-servers: funky-sparrow-12553-us1-kafka.upstash.io:9092
    consumer:
      group-id: KarriGo
      auto-offset-reset: earliest

    properties:
      security:
        protocol: SASL_SSL
      sasl:
        mechanism: SCRAM-SHA-256
        jaas:
          config: org.apache.kafka.common.security.scram.ScramLoginModule required username="ZnVua3ktc3BhcnJvdy0xMjU1MyRvnoNCXo-bH9hF_0NFxHoStyCTx8FXYJciVtE" password="YWEwODA0YjgtNzI1NS00Yzk1LWFjNWMtMTg2NWEyZDUwZTlm";



server:
  port: 8085


cloudinary:
  name: ${CLOUDINARY_NAME}
  api_key: ${CLOUDINARY_API_KEY}
  secret: ${CLOUDINARY_SECRET}



springdoc:
  api-docs:
    enabled: true
    path: /javainuse-openapi/index.html


# kafka:
#     consumer:
#        bootstrap-servers: localhost:9092
#        group-id: KarriGo
#        auto-offset-reset: earliest
#        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#
#     producer:
#        bootstrap-servers: localhost:9092
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer
#        value-serializer: org.apache.kafka.common.serialization.StringSerializer